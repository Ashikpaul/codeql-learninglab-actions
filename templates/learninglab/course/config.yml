# Generated by generate-config.js
# DO NOT EDIT DIRECTLY
# Instead, edit generate-config.js and re-run script

title: <MY-COURSE-TITLE>
tagline: Learn CodeQL in this course
description: >-
  Learn CodeQL in this course
template:
  repo: <MY-COURSE-REPO>-template
  name: <MY-COURSE-REPO>
before:
  - type: createIssue
    title: 'Step 1 - Your first query'
    body: 01_function_definitions.md
steps:

  - title: "Your first query"
    description: "Get set up using CodeQL, and run your first query"
    event: commit_comment.created
    link: '{{ repoUrl }}/issues/1'
    actions:
      # Ensure comment is posted by github-actions
      - type: gate
        left: '%payload.sender.login%'
        operator: ===
        right: github-actions[bot]
      # Ensure comment has expected completed string
      - type: gate
        left: '%payload.comment.body%'
        operator: search
        # regex-escape then yaml-escape the expected markdown string
        right: "/Results for `step-1\\.ql`\\: \\*\\*correct\\*\\* \\(3 results\\)/"

      # Answer is correct!!

      # Create Issue for next task
      - type: createIssue
        title: "Step 2 - alloca definition"
        body: 02_alloca_definition.md
        action_id: next_issue

      # Make comment on current issue with link to commit that introduces correct query
      - type: respond
        issue: "Step 1 - Your first query"
        with: next.md
        data:
          next_issue: '%actions.next_issue.data.html_url%'
          commit: '%payload.comment.commit_id%'

      # Make comment on commit with link to next issue
      - type: octokit
        method: repos.createCommitComment
        owner: '%payload.repository.owner.login%'
        repo: '%payload.repository.name%'
        sha: '%payload.comment.commit_id%'
        body: |
          Congratulations, looks like the query you introduced for step 1 finds the correct results!

          Take a look at the [instructions for the next step](%actions.next_issue.data.html_url%) to continue.

      # Close current issue
      - type: closeIssue
        issue: "Step 1 - Your first query"

  - title: "alloca definition"
    description: "write a query that looks for definitions of a macro"
    event: commit_comment.created
    link: '{{ repoUrl }}/issues'
    actions:
      # Ensure comment is posted by github-actions
      - type: gate
        left: '%payload.sender.login%'
        operator: ===
        right: github-actions[bot]
      # Ensure comment has expected completed string
      - type: gate
        left: '%payload.comment.body%'
        operator: search
        # regex-escape then yaml-escape the expected markdown string
        right: "/Results for `step-2\\.ql`\\: \\*\\*correct\\*\\* \\(5 results\\)/"

      # Answer is correct!!


      # Make comment on current issue with final message
      - type: respond
        issue: "Step 2 - alloca definition"
        with: end.md
        data:
          commit: '%payload.comment.commit_id%'

      # Close current issue
      - type: closeIssue
        issue: "Step 2 - alloca definition"
